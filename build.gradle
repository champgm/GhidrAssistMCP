/* 
 *
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}
else {
	ghidraInstallDir = "<REPLACE>"
}

task distributeExtension {
	group = "Ghidra"

	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
	dependsOn ':buildExtension'
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

repositories {
	mavenCentral()
}

dependencies {
	// MCP SDK core dependency
	implementation 'io.modelcontextprotocol.sdk:mcp:0.10.0'
	
	// Jetty embedded server for servlet container
	implementation 'org.eclipse.jetty:jetty-server:11.0.20'
	implementation 'org.eclipse.jetty:jetty-servlet:11.0.20'
	
	// Jackson for JSON processing (required by MCP)
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.0'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.0'
}

// Exclude additional files from the built extension
// Ex: buildExtension.exclude '.idea/**'

// --- Fast dev: install the built extension into the user's Extensions dir ---
def resolveGhidraUserExtensionsDir = {
	File ghidraUserRoot
	if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
		def appData = System.getenv('APPDATA')
		if (appData) {
			ghidraUserRoot = new File(appData, 'ghidra')
		}
	}
	if (ghidraUserRoot == null) {
		def userHome = System.properties['user.home']
		ghidraUserRoot = new File(userHome, '.ghidra')
	}
	if (!ghidraUserRoot.exists()) {
		return null
	}

	// Try to match the .ghidra_<version> directory that corresponds to the GHIDRA_INSTALL_DIR version
	def desiredVersion = null
	def desiredRelease = null
	def appProps = new File(ghidraInstallDir, "Ghidra/application.properties")
	if (appProps.exists()) {
		def p = new Properties()
		appProps.withInputStream { p.load(it) }
		desiredVersion = p.getProperty('application.version')
		desiredRelease = p.getProperty('application.release.name', 'PUBLIC')
	}

	File versionDir = null
	def candidatesArray = ghidraUserRoot.listFiles(new FileFilter() {
		@Override
		boolean accept(File f) {
			return f.isDirectory() && (f.name.startsWith('ghidra_') || f.name.startsWith('.ghidra_'))
		}
	})
	def candidates = candidatesArray ? candidatesArray.toList() : []

	if (desiredVersion) {
		def matched = candidates.findAll { it.name.toLowerCase().contains(desiredVersion.toLowerCase()) }
		if (!matched.isEmpty()) {
			versionDir = matched.sort { a, b -> b.lastModified() <=> a.lastModified() }.first()
		}
	}
	if (versionDir == null && !candidates.isEmpty()) {
		versionDir = candidates.sort { a, b -> b.lastModified() <=> a.lastModified() }.first()
	}
	return versionDir ? new File(versionDir, 'Extensions') : null
}

task devInstall {
	group = "Ghidra"
	description = "Builds and stages the extension ZIP into the install Extensions/Ghidra directory with a stable name."
	dependsOn 'buildExtension'
	doLast {
		def distDir = file("${projectDir}/dist")
		def zipSet = fileTree(distDir) { include '*.zip' }.files
		def zipFiles = zipSet ? zipSet.toList() : []
		if (!zipFiles || zipFiles.size() == 0) {
			throw new GradleException("No extension zip found in ${distDir}. Did buildExtension run?")
		}
		def zipFile = zipFiles.sort { a, b -> b.lastModified() <=> a.lastModified() }.first()

		def installDir = file("${ghidraInstallDir}/Extensions/Ghidra")
		installDir.mkdirs()
		def stableName = "GhidrAssistMCP.zip"
		copy {
			from zipFile
			into installDir
			rename { stableName }
		}
		println "Staged ${zipFile.name} to ${installDir}/${stableName}"
	}
}

task runGhidra(type: Exec) {
	group = "Ghidra"
	description = "Runs Ghidra after installing the extension."
	dependsOn 'devInstall'
	if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
		commandLine "${ghidraInstallDir}\\ghidraRun.bat"
	} else {
		commandLine "${ghidraInstallDir}/ghidraRun"
	}
}

task devInstallUser {
	group = "Ghidra"
	description = "Builds and installs the extension into the user's Extensions/Ghidra directory for immediate loading."
	dependsOn 'buildExtension'
	doLast {
		def userExtensionsDir = resolveGhidraUserExtensionsDir()
		if (!userExtensionsDir) {
			throw new GradleException("Could not resolve user's Ghidra Extensions directory. Launch Ghidra once, then retry.")
		}
		userExtensionsDir.mkdirs()

		def distDir = file("${projectDir}/dist")
		def zipSet = fileTree(distDir) { include '*.zip' }.files
		def zipFiles = zipSet ? zipSet.toList() : []
		if (!zipFiles || zipFiles.size() == 0) {
			throw new GradleException("No extension zip found in ${distDir}. Did buildExtension run?")
		}
		def zipFile = zipFiles.sort { a, b -> b.lastModified() <=> a.lastModified() }.first()

		copy {
			from zipTree(zipFile)
			into userExtensionsDir
		}
		println "Installed ${zipFile.name} into ${userExtensionsDir}"
	}
}

task runGhidraUser(type: Exec) {
	group = "Ghidra"
	description = "Installs into user dir and launches Ghidra."
	dependsOn 'devInstallUser'
	if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
		commandLine "${ghidraInstallDir}\\ghidraRun.bat"
	} else {
		commandLine "${ghidraInstallDir}/ghidraRun"
	}
}
